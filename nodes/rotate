#!/usr/bin/env python
"""
 Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.

 Permission is hereby granted, free of charge, to any person obtaining a copy of this
 software and associated documentation files (the "Software"), to deal in the Software
 without restriction, including without limitation the rights to use, copy, modify,
 merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
 permit persons to whom the Software is furnished to do so.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
"""


import rospy
from geometry_msgs.msg import Twist

PI = 3.1415926535897

class Diagonal():
    def __init__(self):
        self._cmd_pub = rospy.Publisher('/cmd_vel', Twist, queue_size=2)


    def rotate(self):
        
        # Create Twist obj
        self.twist = Twist()
        
        # Converting 45 degrees in radians
        fourty_five = 45*PI/180
        # Degrees turning per second (15 degrees per second)
        angular_speed = 15*PI/180
        
        currentAngle = 0
        time_initial = rospy.Time.now().to_sec()
        
        # Initiate Rotate clockwise 45 degrees
        while(currentAngle < fourty_five):
            self.twist.angular.z = fourty_five
            time_current = rospy.Time.now().to_sec()
            currentAngle = angular_speed * (time_current - time_initial)
            self._cmd_pub.publish(self.twist)
            rospy.loginfo("Turning fourty five degrees clockwise: %s", self.twist)
            
        # Stop rotation
        self.twist.angular.z = 0
        self._cmd_pub.publish(self.twist)
        
        
    
    def move_forward(self):
        self.twist = Twist()
        
        # distance to move
        x = 5
        velocity = 1
        
        
        # Stops the robot from moving in its track if shutdown
        while not rospy.is_shutdown():
            
            time_initial = rospy.Time.now().to_sec()
            current_distance = 0
            
            # Move x distance forward
            while(current_distance < x):
                self.twist.linear.x = x
                time_current = rospy.Time.now().to_sec()
                current_distance = velocity * (time_initial - time_initial)
                self._cmd_pub.publish(self.twist)
                rospy.loginfo("Moving 5 distance forward: %s", self.twist)
            
            self.twist.linear.x = 0
            self._cmd_pub.publish(self.twist)
            break
    
    
    # Shutdown ROS
    def enable_shutdown(self):
        rospy.shutdown()
                
    # Initial Code
    # Kept for reference
    def rotate_forever(self):
        self.twist = Twist()

        r = rospy.Rate(10)
        while not rospy.is_shutdown():
            self.twist.angular.z = 0.1
            self._cmd_pub.publish(self.twist)
            rospy.loginfo("Rotating robot: %s", self.twist)
            r.sleep()


def main():
    rospy.init_node('rotate')
    try:
        mover = Diagonal()
        mover.rotate()
        mover.move_forward()
        mover.enable_shutdown()
    except rospy.ROSInterruptException:
        pass

if __name__ == '__main__':
    main()
